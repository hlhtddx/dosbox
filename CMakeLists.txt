# Autogenerated by auto2cmake on 2018-04-26 11:06:31

# Options

cmake_minimum_required(VERSION 2.8)
# Option to with alsa midi support (default yes)
option( ALSA_MIDI "with alsa midi support (default yes)" OFF )

# Option to inlined memory handling in CPU Core
option( CORE_INLINE "inlined memory handling in CPU Core" OFF )

# Option to ddraw support
option( DDRAW "ddraw support" ON )

# Option to debug mode
option( DEBUG "debug mode" ON )

# Option to all dynamic cores
option( DYNAMIC_CORE "all dynamic cores" ON )

# Option to x86 dynamic cpu core
option( DYNAMIC_X86 "x86 dynamic cpu core" ON )

# Option to recompiling cpu core
option( DYNREC "recompiling cpu core" ON )

# Option to fpu support
option( FPU "fpu support" ON )

# Option to x64 assembly fpu core
option( FPU_X64 "x64 assembly fpu core" ON )

# Option to x86 assembly fpu core
option( FPU_X86 "x86 assembly fpu core" ON )

# Option to opengl support
option( OPENGL "opengl support" ON )

# Option to unaligned memory access
option( UNALIGNED_MEMORY "unaligned memory access" ON )

# Option to Enable WINDRES
option( WINDRES "Enable WINDRES" OFF )

# The lines below will generate the config.h based on the options above
# The file will be in the ${CMAKE_BINARY_DIR} location
set(CONFIG_H ${CMAKE_BINARY_DIR}/include/config.h)
string(TIMESTAMP CURRENT_TIMESTAMP)
file(WRITE ${CONFIG_H} "/* WARNING: This file is auto-generated by CMake on ${CURRENT_TIMESTAMP}. DO NOT EDIT!!! */\n\n")
if( ALSA_MIDI )
    message(" ALSA_MIDI Enabled")
    file(APPEND ${CONFIG_H} "/* with alsa midi support default yes */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_ALSA_MIDI \n\n")
endif( ALSA_MIDI )
if( CORE_INLINE )
    message(" CORE_INLINE Enabled")
    file(APPEND ${CONFIG_H} "/* inlined memory handling in CPU Core */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_CORE_INLINE \n\n")
## !!! WARNING C_CORE_INLINE Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define C_CORE_INLINE\n\n")
endif( CORE_INLINE )
if( DDRAW )
    message(" DDRAW Enabled")
    file(APPEND ${CONFIG_H} "/* ddraw support */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_DDRAW \n\n")
## !!! WARNING C_DDRAW Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define C_DDRAW\n\n")
endif( DDRAW )
if( DEBUG )
    message(" DEBUG Enabled")
    file(APPEND ${CONFIG_H} "/* debug mode */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_DEBUG \n\n")
## !!! WARNING C_DEBUG Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define C_DEBUG\n\n")
## !!! WARNING C_HEAVY_DEBUG Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define C_HEAVY_DEBUG\n\n")
endif( DEBUG )
if( DYNAMIC_CORE )
    message(" DYNAMIC_CORE Enabled")
    file(APPEND ${CONFIG_H} "/* all dynamic cores */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_DYNAMIC_CORE \n\n")
## !!! WARNING C_DYNAMIC_X86 Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define C_DYNAMIC_X86\n\n")
endif( DYNAMIC_CORE )
if( DYNAMIC_X86 )
    message(" DYNAMIC_X86 Enabled")
    file(APPEND ${CONFIG_H} "/* x86 dynamic cpu core */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_DYNAMIC_X86 \n\n")
## !!! WARNING C_DYNAMIC_X86 Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define C_DYNAMIC_X86\n\n")
endif( DYNAMIC_X86 )
if( DYNREC )
    message(" DYNREC Enabled")
    file(APPEND ${CONFIG_H} "/* recompiling cpu core */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_DYNREC \n\n")
## !!! WARNING C_DYNREC Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define C_DYNREC\n\n")
endif( DYNREC )
if( FPU )
    message(" FPU Enabled")
    file(APPEND ${CONFIG_H} "/* fpu support */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_FPU \n\n")
## !!! WARNING C_FPU Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define C_FPU\n\n")
## !!! WARNING C_FPU_X86 Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define C_FPU_X86\n\n")
endif( FPU )
if( FPU_X64 )
    message(" FPU_X64 Enabled")
    file(APPEND ${CONFIG_H} "/* x64 assembly fpu core */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_FPU_X64 \n\n")
## !!! WARNING C_FPU_X86 Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define C_FPU_X86\n\n")
endif( FPU_X64 )
if( FPU_X86 )
    message(" FPU_X86 Enabled")
    file(APPEND ${CONFIG_H} "/* x86 assembly fpu core */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_FPU_X86 \n\n")
## !!! WARNING C_FPU_X86 Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define C_FPU_X86\n\n")
endif( FPU_X86 )
if( OPENGL )
    message(" OPENGL Enabled")
    file(APPEND ${CONFIG_H} "/* opengl support */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_OPENGL \n\n")
## !!! WARNING C_OPENGL Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define C_OPENGL\n\n")
endif( OPENGL )
if( UNALIGNED_MEMORY )
    message(" UNALIGNED_MEMORY Enabled")
    file(APPEND ${CONFIG_H} "/* unaligned memory access */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_UNALIGNED_MEMORY \n\n")
## !!! WARNING C_UNALIGNED_MEMORY Identified with some pattern matching magic.
## Remove if not relevant!")
    file(APPEND ${CONFIG_H} "#define C_UNALIGNED_MEMORY\n\n")
endif( UNALIGNED_MEMORY )
if( WINDRES )
    message(" WINDRES Enabled")
    file(APPEND ${CONFIG_H} "/* Enable WINDRES */\n")
    file(APPEND ${CONFIG_H} "#define HAVE_WINDRES \n\n")
endif( WINDRES )

## !!! WARNING These are the defines that were defined regardless of an option.
## !!! Or the script couldn't match them. Match them accordingly, delete them or keep them
file(APPEND ${CONFIG_H} "/* Define to 1 if you want serial passthrough support Win32 Posix and OS/2. */\n")
file(APPEND ${CONFIG_H} "#define C_DIRECTSERIAL 1 \n\n ")
file(APPEND ${CONFIG_H} "/*  */\n")
file(APPEND ${CONFIG_H} "#define C_X11_XKB 1 \n\n ")
file(APPEND ${CONFIG_H} "/*  */\n")
file(APPEND ${CONFIG_H} "#define C_TARGETCPU UNKNOWN \n\n ")
file(APPEND ${CONFIG_H} "/* Compiling on Mac OS X */\n")
file(APPEND ${CONFIG_H} "#define MACOSX 1 \n\n ")
file(APPEND ${CONFIG_H} "/* Compiling on BSD */\n")
file(APPEND ${CONFIG_H} "#define BSD 1 \n\n ")
file(APPEND ${CONFIG_H} "/* Compiling on OS/2 EMX */\n")
file(APPEND ${CONFIG_H} "#define OS2 1 \n\n ")
file(APPEND ${CONFIG_H} "/*  */\n")
file(APPEND ${CONFIG_H} "#define C_IPX 1 \n\n ")
file(APPEND ${CONFIG_H} "/*  */\n")
file(APPEND ${CONFIG_H} "#define C_MODEM 1 \n\n ")
file(APPEND ${CONFIG_H} "/*  */\n")
file(APPEND ${CONFIG_H} "#define C_SDL_SOUND 1 \n\n ")
file(APPEND ${CONFIG_H} "/*  */\n")
file(APPEND ${CONFIG_H} "#define DB_HAVE_CLOCK_GETTIME  \n\n ")
file(APPEND ${CONFIG_H} "/*  */\n")
file(APPEND ${CONFIG_H} "#define C_SSHOT 1 \n\n ")
file(APPEND ${CONFIG_H} "/* Compiling on GNU/Linux */\n")
file(APPEND ${CONFIG_H} "#define LINUX 1 \n\n ")

set(PKG_CONFIG_EXECUTABLE "/opt/local/bin/pkg-config")
find_package(PkgConfig)

pkg_check_modules(SDL_NET sdl_net<=1.2.99)
FIND_LIBRARY(SDL_SND_LIBRARY SDL_sound)
FIND_LIBRARY(COCOA_LIBRARY Cocoa)
FIND_LIBRARY(APPKIT_LIBRARY AppKit)
FIND_LIBRARY(OPENGL_LIBRARY OpenGL)
FIND_LIBRARY(COREMIDI_LIBRARY CoreMIDI)
FIND_LIBRARY(AUDIOUNIT_LIBRARY AudioUnit)
FIND_LIBRARY(AUIDOTOOLBOX_LIBRARY AudioToolbox)

set(DOSBOX_CXX_FLAGS ${SDL_NET_CFLAGS})
set(DOSBOX_LD_FLAGS ${SDL_NET_LDFLAGS_OTHER})
set(DOSBOX_INCLUDE_DIRS ${SDL_NET_INCLUDE_DIRS})
set(DOSBOX_LIBRARY_DIRS ${SDL_NET_LIBRARY_DIRS})
set(DOSBOX_LIBRARIES
    ${SDL_NET_LIBRARIES} ${SDL_SND_LIBRARY}
    ${COCOA_LIBRARY} ${APPKIT_LIBRARY}
    ${OPENGL_LIBRARY} ${COREMIDI_LIBRARY}
    ${AUDIOUNIT_LIBRARY} ${AUIDOTOOLBOX_LIBRARY} )

message(${DOSBOX_CXX_FLAGS})
message(${DOSBOX_LD_FLAGS})
message(${DOSBOX_INCLUDE_DIRS})
message(${DOSBOX_LIBRARY_DIRS})
message(${DOSBOX_LIBRARIES})

include_directories( ${CMAKE_SOURCE_DIR}/include ${DOSBOX_INCLUDE_DIRS} )
link_directories( ${DOSBOX_LIBRARY_DIRS} )
# Since we have created a config.h add a global define for it
add_definitions( "-DHAVE_CONFIG_H" )
add_subdirectory( src )
add_subdirectory( include )
add_subdirectory( docs )
